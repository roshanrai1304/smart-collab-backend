# Generated by Django 5.2.6 on 2025-10-15 13:30

import django.db.models.deletion
import django.utils.timezone
import pgvector.django.vector
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        (
            "documents",
            "0003_document_draft_content_document_has_unsaved_changes_and_more",
        ),
        ("organizations", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AISuggestionsCache",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "content_hash",
                    models.CharField(
                        help_text="SHA-256 hash of input content",
                        max_length=64,
                        unique=True,
                    ),
                ),
                (
                    "suggestion_type",
                    models.CharField(
                        choices=[
                            ("writing", "Writing Assistance"),
                            ("formatting", "Formatting Suggestions"),
                            ("completion", "Text Completion"),
                            ("grammar", "Grammar Check"),
                            ("style", "Style Improvement"),
                        ],
                        help_text="Type of AI suggestion",
                        max_length=50,
                    ),
                ),
                ("input_text", models.TextField(help_text="Original input text")),
                (
                    "suggestions",
                    models.JSONField(
                        default=list, help_text="AI-generated suggestions"
                    ),
                ),
                (
                    "model_version",
                    models.CharField(
                        blank=True, help_text="AI model version used", max_length=50
                    ),
                ),
                (
                    "confidence_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Confidence score for suggestions",
                        max_digits=3,
                        null=True,
                    ),
                ),
                (
                    "usage_count",
                    models.IntegerField(
                        default=0, help_text="Number of times this cache entry was used"
                    ),
                ),
                (
                    "last_used",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Last time this cache entry was accessed",
                    ),
                ),
                ("expires_at", models.DateTimeField(help_text="Cache expiration time")),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                "db_table": "ai_suggestions_cache",
                "ordering": ["-last_used"],
                "indexes": [
                    models.Index(fields=["content_hash"], name="idx_ai_cache_hash"),
                    models.Index(fields=["suggestion_type"], name="idx_ai_cache_type"),
                    models.Index(fields=["expires_at"], name="idx_ai_cache_expires"),
                    models.Index(fields=["last_used"], name="idx_ai_cache_last_used"),
                ],
            },
        ),
        migrations.CreateModel(
            name="AIDocumentMetadata",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "processing_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("skipped", "Skipped"),
                        ],
                        default="pending",
                        help_text="Current processing status",
                        max_length=20,
                    ),
                ),
                (
                    "last_processed",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp of last successful processing",
                        null=True,
                    ),
                ),
                (
                    "processing_version",
                    models.CharField(
                        default="1.0",
                        help_text="Version of processing pipeline",
                        max_length=50,
                    ),
                ),
                (
                    "model_version",
                    models.CharField(
                        blank=True, help_text="AI model version used", max_length=50
                    ),
                ),
                (
                    "summary",
                    models.TextField(
                        blank=True, help_text="AI-generated document summary"
                    ),
                ),
                (
                    "key_points",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Extracted key points with confidence scores",
                    ),
                ),
                (
                    "auto_tags",
                    models.JSONField(
                        blank=True, default=list, help_text="AI-generated tags"
                    ),
                ),
                (
                    "sentiment_score",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Sentiment score (-1.0 to 1.0)",
                        max_digits=3,
                        null=True,
                    ),
                ),
                (
                    "readability_score",
                    models.IntegerField(
                        blank=True, help_text="Flesch reading ease score", null=True
                    ),
                ),
                (
                    "detected_content_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("article", "Article"),
                            ("report", "Report"),
                            ("meeting_notes", "Meeting Notes"),
                            ("proposal", "Proposal"),
                            ("technical_doc", "Technical Document"),
                            ("presentation", "Presentation"),
                            ("other", "Other"),
                        ],
                        help_text="AI-detected document type",
                        max_length=50,
                    ),
                ),
                (
                    "embedding_vector",
                    pgvector.django.vector.VectorField(
                        blank=True,
                        dimensions=768,
                        help_text="Document embedding vector",
                        null=True,
                    ),
                ),
                (
                    "embedding_model",
                    models.CharField(
                        blank=True, help_text="Model used for embeddings", max_length=50
                    ),
                ),
                (
                    "confidence_scores",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Confidence scores for AI outputs",
                    ),
                ),
                (
                    "processing_time_ms",
                    models.IntegerField(
                        blank=True,
                        help_text="Processing time in milliseconds",
                        null=True,
                    ),
                ),
                (
                    "cache_key",
                    models.CharField(
                        blank=True,
                        help_text="Cache key for this metadata",
                        max_length=128,
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="Cache expiration time", null=True
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if processing failed"
                    ),
                ),
                (
                    "retry_count",
                    models.IntegerField(
                        default=0, help_text="Number of processing retries"
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "document",
                    models.OneToOneField(
                        help_text="Associated document",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_metadata",
                        to="documents.document",
                    ),
                ),
                (
                    "organization",
                    models.ForeignKey(
                        help_text="Organization for partitioning",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="organizations.organization",
                    ),
                ),
            ],
            options={
                "db_table": "ai_document_metadata",
                "ordering": ["-updated_at"],
                "indexes": [
                    models.Index(fields=["document"], name="idx_ai_meta_document"),
                    models.Index(fields=["organization"], name="idx_ai_meta_org"),
                    models.Index(
                        fields=["processing_status"], name="idx_ai_meta_status"
                    ),
                    models.Index(
                        fields=["last_processed"], name="idx_ai_meta_processed"
                    ),
                    models.Index(
                        fields=["detected_content_type"],
                        name="idx_ai_meta_content_type",
                    ),
                    models.Index(fields=["expires_at"], name="idx_ai_meta_expires"),
                ],
            },
        ),
        migrations.CreateModel(
            name="AIProcessingQueue",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("summarize", "Document Summarization"),
                            ("tag", "Tag Extraction"),
                            ("embed", "Embedding Generation"),
                            ("analyze", "Content Analysis"),
                            ("all", "Complete Processing"),
                        ],
                        help_text="Type of AI processing task",
                        max_length=50,
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        choices=[
                            (1, "Critical"),
                            (2, "High"),
                            (3, "Normal"),
                            (4, "Low"),
                            (5, "Background"),
                        ],
                        default=3,
                        help_text="Task priority (1=highest, 5=lowest)",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("queued", "Queued"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="queued",
                        max_length=20,
                    ),
                ),
                (
                    "celery_task_id",
                    models.CharField(
                        blank=True,
                        help_text="Celery task ID for tracking",
                        max_length=255,
                    ),
                ),
                (
                    "input_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Input parameters for the task",
                    ),
                ),
                (
                    "output_data",
                    models.JSONField(
                        blank=True, default=dict, help_text="Task results and outputs"
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True, help_text="Error message if task failed"
                    ),
                ),
                (
                    "retry_count",
                    models.IntegerField(
                        default=0, help_text="Number of retries attempted"
                    ),
                ),
                (
                    "processing_time_ms",
                    models.IntegerField(
                        blank=True,
                        help_text="Task processing time in milliseconds",
                        null=True,
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "document",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_processing_tasks",
                        to="documents.document",
                    ),
                ),
            ],
            options={
                "db_table": "ai_processing_queue",
                "ordering": ["priority", "-created_at"],
                "indexes": [
                    models.Index(
                        fields=["document", "task_type"], name="idx_ai_queue_doc_type"
                    ),
                    models.Index(
                        fields=["status", "priority"],
                        name="idx_ai_queue_status_priority",
                    ),
                    models.Index(
                        fields=["celery_task_id"], name="idx_ai_queue_celery_id"
                    ),
                    models.Index(fields=["created_at"], name="idx_ai_queue_created"),
                ],
            },
        ),
    ]
